local recorder = require('example.modules.recorder')
local camera = require('example.modules.camera')
local share = require('example.modules.sharing')

local example_ui = require('example.logic.example_ui')

local function init_recorder(self)
	self.params.render_target = camera.render_target
	recorder.init(self.params)
end

local function start_record(self)
	recorder.start_record()
end

local function stop_record(self)
	recorder.stop_record()
end

local function mux_video(self)
	recorder.mux_audio_video()
end

local function preview(self)
	recorder.show_preview()
end

local function share_video(self)
	local file_for_mux = self.is_muxed and recorder.get_muxed_file_path() or recorder.get_video_file_path()
	share.send(file_for_mux)
end

local function download_video(self)
	local file_for_download = self.is_muxed and recorder.get_muxed_file_path() or recorder.get_video_file_path()
	directories.download_file(file_for_download)
end

local function on_error(self)
	local file = directories.path_for_file("log.txt", directories.documents)
	local audio_file = io.open(file, 'wb')
	audio_file:write(recorder.logging)
	audio_file:close()
	if recorder.platform.is_html5 then
		directories.download_file(file)
	else
		if share.is_avaliable() then
			share.send(file)
		end
	end
end

local function recorder_listener(self, event)
	if event.is_error then
		example_ui.on_error(self)
		return
	end
	if event.phase == 'init' then
		example_ui.recorder_inited(self)
	elseif event.phase == 'recorded' then
		example_ui.show_post_record_options(self)
		if screenrecorder.is_preview_available() then
			example_ui.show_preview(self, true)
		end
	elseif event.phase == 'muxed' then
		self.is_muxed = true
		example_ui.show_preview(self, false)
		example_ui.show_post_record_options(self, true)
	elseif event.phase == 'preview' then
		
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	--use_stretch_projection, use_fixed_projection, use_fixed_fit_projection
	--setup use_fixed_fit_projection for render target
	msg.post("@render:", hash("use_fixed_fit_projection"))

	recorder.fill_defaulf_params()
	recorder.register_listener(self, recorder_listener)

	-- all UI specific things are hidden in example_ui.lua
	-- example.gui_script contain only screenrecording related logic
	
	example_ui.init(self)
	example_ui.func_start_record = start_record
	example_ui.func_init_recorder = init_recorder
	example_ui.func_stop_record = stop_record
	example_ui.func_mux = mux_video
	example_ui.func_share = share_video
	example_ui.func_download = download_video
	example_ui.func_error = on_error
	example_ui.func_preview = preview
end

function on_input(self, action_id, action)
	example_ui.on_input(self, action_id, action)
end